/******************************************************************************
//  ConMed Integrated Systems
//  Conference Room - 17C00
//
//  $Id: Conference\040-\040RoomControl.usp,v 1.4 2009/01/07 02:02:18 jjohns Exp $
//
******************************************************************************/
//  PURPOSE
//	------------- 
//  This module supports the Room selection GUI functions and controls the button
//  labels that are applied when this page is active.  It also controls whether
//  room selection buttons are visible, grayed out, or active.
//
//	REVISION HISTORY
//	------------------
//
//  $Log: Conference\040-\040RoomControl.usp,v $
//  Revision 1.4  2009/01/07 02:02:18  jjohns
//  * Indentation and debug statement cleanup
//  * Add signal control for VTC
//  * Remove unused signals
//  * Delete unused modules
//
//  Revision 1.3  2008/07/25 23:54:53  jjohns
//  Enable/disable room select buttons when updated
//
//  Revision 1.2  2008/07/21 19:03:02  jjohns
//  Hub Update for Emory, 1.3A01
//
//  CMIS_Hub_Library.usl
//  - Pull FCRM_ID out; moved to Configure.usp
//
//  Conference - HubComm.usp
//  - Added Module Instance to debug strings
//  - Set unused conference strings to <No Signal> instead of empty
//  - Count # of inputs up to MAX_RMCONF, not aiRmAttrSVidCountIn (A DRm can pick any of 4 lines to import on its single input line)
//  - During startup, initialize conference strings to <No Signal> instead of empty
//  - During startup, ensure gsConferenceInSource is initialized to a special value so that garbage memory may not cause a false positive in UpdateConfString().
//
//  Conference - PassiveHubComm.usp
//  - In ProcessSystemStatus(), if Hub was disabled and a message is received, set room state to Idle
//
//  Conference - RoomControl.usp
//  - Added Module Instance to debug strings
//
//  ConferenceHub*.smw
//  - Emory: Stage initialization signals were not correct
//  - Emory: Don't activate PassiveHubComm until Stage 3 Complete
//  - Nebraska: Added SMW for Nebraska
//  - Other: Remove Configure/Initialization when unneeded
//  - ConferenceHub.smw should work with an appropriate Configure.usp (FCRm ID must be set to 7), but is now obsolete
//
//  ConferenceHub.usp
//  - Read local room configuration from Hubconfigure.txt (lrattr parameter)
//  - Implement quote-deliniated string support in Hubconfigure.txt
//  - Default local endpoints to speak Protocol 003
//  - Signal when initialization complete (needed for correct startup of local rooms)
//
//  Configure.usp
//  - Added FCRM ID
//  - Removed local room configuration data
//
//  Revision 1.1  2006/08/30 23:50:05  kflesk
//  1st pass to add Room Conferencing support for Hub connected rooms.  Although Conference Hub
//  module now recognizes that a local endpoint is present, and the endpoint is sending a Keep
//  Alive Message, two way communications are not yet supported.
//
//  Revision 1.2  2006/04/08 00:13:59  kfleskes
//  Continuing to work on getting all of joins correct between Emory Conference
//  Room merged with CMIS view of the world.  Changes included:
//  1)  mini-page joins and buttons for conferencing and startup/shutdown
//  2)  Call state and status
//  3) Access to VTC Screen and buttons.
//
//  Revision 1.1.1.1  2006/04/04 22:49:33  kfleskes
//  Initial Check-in to CVS (merged version of CMIS and Emory)
//
//
/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/

// #HINT ""
// #DEFINE_CONSTANT  
#DEFINE_CONSTANT	MODULE_NAME		"RoomControl"

#DEFINE_CONSTANT	MAX_ROOMS		16

#DEFINE_CONSTANT	ROOM_HIDDEN		0
#DEFINE_CONSTANT	ROOM_DISABLED	1
#DEFINE_CONSTANT	ROOM_ENABLED	2 

// #CATEGORY "" 
// #DEFAULT_VOLATILE
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional librarys as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// INPUTS 
DIGITAL_INPUT 	sp_SelectRoom;				/* Room Select sub-page activated */ 
DIGITAL_INPUT	RoomAvailable[MAX_ROOMS];	/* For each room, this input defines whether it's online or not. */
DIGITAL_INPUT	pbRoomSelected[MAX_ROOMS];  /* Button press input for each room. */

ANALOG_INPUT	SysRoomCount; 				/* Maximum number of room the system configured to use	*/
											/* 		- theoretical limit is MAX_ROOMS				*/              
ANALOG_INPUT	MyRoomID;                   /* Need to know what "this" room number is, so keep		*/
											/* that button hidden.									*/

STRING_INPUT	RoomNames[MAX_ROOMS][20];	/* Room Names used for that ONE room the user chooses */

// OUTPUTS  
DIGITAL_OUTPUT	ConfCallActivate;			/* To activate a call, must first select a room */
DIGITAL_OUTPUT	CloseRoomSelect;
DIGITAL_OUTPUT	fpbRoomSelected[MAX_ROOMS];	/* Feedback Digital join for user room selections */

ANALOG_OUTPUT	aoTargetRoomID;				/* Selected Room number (SW internal only, not user data) */

STRING_OUTPUT	TargetRoomName;				/* Selected Room Name */ 

ANALOG_OUTPUT	aoGuiRoomState[MAX_ROOMS];  /* controls whether a button appears as invisible, grayed out, or active. */                

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*STRUCTURE SYSTEMSTATUS
{
	integer iID;
	string	sRName[20];
};

SYSTEMSTATUS Room[MAX_ROOMS];
*/
/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
// INTEGER
// STRING  

integer iTargetRoomID;  // Target Room Identifier.
string gModInstance[50];	// Module instance

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
function UpdateRoomButton(integer i)
{
	if (i > sysRoomCount)
	{
		if (aoGuiRoomState[i] <> ROOM_HIDDEN)
			aoGuiRoomState[i] = ROOM_HIDDEN;
	}
	else
	{
		if (i = MyRoomID)
		{
			if (aoGuiRoomState[i] <> ROOM_HIDDEN)
				aoGuiRoomState[i] = ROOM_HIDDEN;
		}
    	else
    	{
    		if (RoomAvailable[i] = 0)
			{
				if (aoGuiRoomState[i] <> ROOM_DISABLED)
	    			aoGuiRoomState[i] = ROOM_DISABLED;
			}
    		else
			{
				if (aoGuiRoomState[i] <> ROOM_ENABLED)
    				aoGuiRoomState[i] = ROOM_ENABLED;
			}
		}
	}
}


/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*------------------------------------------------------------------------------------------**
** This event occurs when the Room Select mini-page is displayed.  The room select			**
** minipage is capable of displaying all the rooms in the system, but will only let the	user**
** view the maximum number of rooms as defined by the SysRoomCount, and of those, only the  **
** ones that have been reported online by the hub will be selectable.  Also, the room that	**
** the user is actually in will never be shown, but the user will see a blank spot on the	**
** display for "this" room.
**------------------------------------------------------------------------------------------*/
PUSH sp_SelectRoom
{
	integer i; 
		
	/* Conferencing enabled for this system */
	/* Open the serial comms to the Hub     */

	print ("%s: Conference page entered\n", gModInstance);
        
    /* Set the button "look" for each room choice */
	for (i = 1 to MAX_ROOMS step 1)
	{
		UpdateRoomButton(i);
	}
	
	/* GUI button labels are sent directly from the Hub Communications automatically set... */	    	
}

CHANGE RoomAvailable
{
	integer i; 

	i = getlastmodifiedarrayindex();

	if (sp_SelectRoom = ON)
		UpdateRoomButton(i);
}

/*------------------------------------------------------------------------------------------**
** When a Room button is selected, this PUSH event determines whether the user is allowed	**
** to use that button based on the system configuration size, if the room has reported		**
** online, and does not allow the user to select their own room.							**
**------------------------------------------------------------------------------------------*/
PUSH pbRoomSelected
{
	integer i; 

	i = getlastmodifiedarrayindex();

	print ("%s: Room Button: %i\n", gModInstance, i);
	print ("%s: MyRoomID: %i,  sysRoomCount: %i,  RoomAvailable: %i\n", gModInstance, MyRoomID, SysRoomCount, RoomAvailable[i]);

	if ((i <> MyRoomID) && (i <= SysRoomCount) && (RoomAvailable[i] = ON)) 
	{
		print("%s: Target Room: %i\n", gModInstance, i);
		fpbRoomSelected[i] = ON; 
		iTargetRoomID = i;
		aoTargetRoomID = i; 
		TargetRoomName = RoomNames[i];

		pulse(50, CloseRoomSelect);
		pulse(50, ConfCallActivate);
	} 
	
	/* DEBUG */
	/* Begin */
	//else
	//{ 
	//	Print("%s: Can't Select: %i\n", gModInstance, i);
	//	fpbRoomSelected[i] = OFF;
    //}
    /* End   */
    /* DEBUG */
}


/*----------------------------------------------------------------------**
** Clears Feedback for any room select button, whether allowed or not	**
**----------------------------------------------------------------------*/
RELEASE pbRoomSelected
{ 
	integer i;

	i = getlastmodifiedarrayindex();
	fpbRoomSelected[i] = OFF;

}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{   
	integer i;

    // Initialize declared global and local variables/arrays as needed.

	WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
    gModInstance = MODULE_NAME + "-" + GetSymbolReferenceName();

    // need to make sure that the OR name has been read in before this stuff is done.  

    for (i = 1 to MAX_ROOMS step 1)
    {
	    aoGuiRoomState[i] = 0; 
	    fpbRoomSelected[i] = OFF;

    } 
    
    ConfCallActivate = 0;
	CloseRoomSelect  = 0;
    
    aoTargetRoomID = 0;
    iTargetRoomID = 0;
    TargetRoomName = "Please Select";  
//    ConfMessage = "System Idle";
}


